[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}"}
]
classifiers = [
  "{{ cookiecutter.development_status }}",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = []
description = "{{ cookiecutter.project_short_description }}"
dynamic = ["version"]
{% if cookiecutter.license != 'UNLICENSED' -%}
license = "{{ cookiecutter.license }}"
{% endif -%}
name = "{{ cookiecutter.friendly_name }}"
readme = "README.md"
requires-python = ">=3.8"

[project.scripts]
{{ cookiecutter.friendly_name }} = "{{ cookiecutter.project_slug }}.cli:cli"

[project.urls]
Documentation = "https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.repo_name }}"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}/issues"
Source = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}"

[tool.coverage.paths]
{{ cookiecutter.project_slug }} = ["{{ cookiecutter.project_slug }}", "*/{{ cookiecutter.repo_name }}/{{ cookiecutter.project_slug }}"]
tests = ["tests", "*/{{ cookiecutter.repo_name }}/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
omit = [
  "{{ cookiecutter.project_slug }}/__about__.py"
]
parallel = true
source_pkgs = ["{{ cookiecutter.project_slug }}", "tests"]

[tool.hatch.env]
requires = ["hatch-pip-compile"]

[tool.hatch.envs.default]
pip-compile-constraint = "default"
post-install-commands = [
  "- pre-commit install"
]
type = "pip-compile"

[tool.hatch.envs.default.scripts]
cov = "hatch run test:cov"
test = "hatch run test:test"

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings",
  "markdown-exec[ansi]"
]
detached = true
type = "pip-compile"

[tool.hatch.envs.docs.scripts]
build = ["mkdocs build --clean --strict"]
deploy = ["mkdocs gh-deploy {args:}"]
serve = ["mkdocs serve --dev-addr localhost:8080 --livereload"]

[tool.hatch.envs.gen]
detached = false

[tool.hatch.envs.gen.scripts]
release = [
  "npm install --prefix .github/semantic_release/",
  "npx --prefix .github/semantic_release/ semantic-release {args:}"
]

[tool.hatch.envs.lint]
dependencies = [
  "mypy>=1.6.1",
  "ruff~=0.1.7"
]
detached = true
type = "pip-compile"

[tool.hatch.envs.lint.scripts]
all = [
  "style",
  "typing"
]
fmt = [
  "ruff format {args:.}",
  "ruff --fix {args:.}",
  "style"
]
precommit = [
  "pre-commit run --all-files"
]
style = [
  "ruff {args:.}",
  "ruff format --check --diff {args:.}"
]
typing = "mypy --install-types --non-interactive {args:{{ cookiecutter.project_slug }} tests}"

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest"
]

[tool.hatch.envs.test.scripts]
cov = [
  "test-cov",
  "cov-report"
]
cov-report = [
  "- coverage combine",
  "coverage report -m"
]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"

[tool.hatch.version]
path = "{{ cookiecutter.project_slug }}/__about__.py"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "pytest.*"
]

[tool.ruff]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915"
]
line-length = 100
select = [
  "A",  # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",  # flake8-bugbear
  "C",  # mccabe
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (Error)
  "EM",  # flake8-errmsg
  "F",  # Pyflakes
  "FBT",  # flake8-boolean-trap
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "N",  # pep8-naming
  "PLC",  # Pylint (Convention message)
  "PLE",  # Pylint (Error message)
  "PLR",  # Pylint (Refactor message)
  "PLW",  # Pylint (Warning message)
  "Q",  # flake8-quotes
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  "T",  # flake8-debugger (T10) and flake8-print (T20)
  "TID",  # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",  # pycodestyle (Warning)
  "YTT"  # flake8-2020
]
target-version = "py38"
unfixable = [
  # Don't touch unused imports
  "F401"
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["{{ cookiecutter.project_slug }}"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.pydocstyle]
convention = "numpy"
