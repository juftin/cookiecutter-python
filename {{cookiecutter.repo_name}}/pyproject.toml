[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ cookiecutter.friendly_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
requires-python = ">=3.9"
dependencies = []
authors = [
  {name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}"}
]
{% if cookiecutter.license != 'UNLICENSED' -%}
license = "{{ cookiecutter.license }}"
{% endif -%}
classifiers = [
  "{{ cookiecutter.development_status }}",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]

[project.urls]
Documentation = "https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.repo_name }}"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}/issues"
Source = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}"

[dependency-groups]
dev = [
  "pytest",
  "pytest-cov",
  "mypy>=1,<2",
  "ruff~=0.12.10"
]
docs = [
  "mkdocs~=1.6.1",
  "mkdocs-material~=9.6.18",
  "markdown-callouts~=0.4.0",
  "markdown-exec~=1.11.0",
  "mkdocs-section-index~=0.3.10",
  "mkdocs-autorefs~=1.4.3",
  "mkdocstrings[python]~=0.30.0",
  "mkdocs-gen-files~=0.5.0",
  "mkdocs-literate-nav~=0.6.2",
  "pymdown-extensions~=10.16.1"
]

[tool.pytest.ini_options]
addopts = [
  "-v",
  "--cov=src/{{ cookiecutter.project_slug }}",
  "--cov-report=term-missing",
  "--cov-report=xml:coverage.xml",
  "--junitxml=pytest.xml"
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
omit = [
  "src/{{ cookiecutter.project_slug }}/__about__.py"
]
parallel = true

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
ignore = [
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Boolean-typed positional argument in function definition
  "FBT001",
  # Boolean default positional argument in function definition
  "FBT002",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Exception must not use a string literal, assign to variable first
  "EM101"
]
select = [
  "A",  # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",  # flake8-bugbear
  "C",  # mccabe
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (Error)
  "EM",  # flake8-errmsg
  "F",  # Pyflakes
  "FBT",  # flake8-boolean-trap
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "N",  # pep8-naming
  "PLC",  # Pylint (Convention message)
  "PLE",  # Pylint (Error message)
  "PLR",  # Pylint (Refactor message)
  "PLW",  # Pylint (Warning message)
  "Q",  # flake8-quotes
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  "T",  # flake8-debugger (T10) and flake8-print (T20)
  "TID",  # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",  # pycodestyle (Warning)
  "YTT"  # flake8-2020
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.project_slug }}"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
